- name: Ensure OPSUSR group exists
  ansible.builtin.group:
    name: "{{ opsusr_name }}"
    state: present

- name: Ensure OPSUSR user exists
  ansible.builtin.user:
    name: "{{ opsusr_name }}"
    group: "{{ opsusr_name }}"
    comment: "User to run applications"
    shell: "/bin/bash"
    create_home: yes
    home: "/home/{{ opsusr_name }}"
    state: present

- name: Ensure OPSUSR home directory permissions are secure
  file:
    path: "/home/{{ opsusr_name }}"
    owner: "{{ opsusr_name }}"
    group: "{{ opsusr_name }}"
    mode: '0700'                # Restrict access to OPSUSR only   

- name: Install PostgreSQL
  apt:
    name: "postgresql-{{ postgresql_version }}"
    state: present
    update_cache: yes
        
- name: Enable all other computers to connect to the PostgreSQL server
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    regexp: "^#listen_addresses = "
    insertafter: '^listen_addresses = '
    line: "listen_addresses = '*' "
    create: yes
    mode: '0644'
  notify: Reload systemd and restart PostgreSQL      

- name: Ensure PostgreSQL service is running
  ansible.builtin.systemd:
    name: "postgresql@{{ postgresql_version }}-main"
    state: started
    enabled: yes

- name: Deploy shell script to create Test user
  copy:
    src: "{{ role_path }}/files/create_postgresql_test_user.sh"
    dest: "/tmp/"
    owner: "{{ opsusr_name }}"
    group: "{{ opsusr_name }}"
    mode: '0755'      

- name: Execute shell script to create Test user
  ansible.builtin.command: "{{ script_path }}"
  register: script_result
  changed_when: script_result.rc == 0
  failed_when: script_result.rc != 0

- name: Display script output
  ansible.builtin.debug:
    msg: "{{ script_result.stdout_lines }}"

- name: Copy credentials file back to control node
  ansible.builtin.fetch:
    src: "{{ credential_file }}"
    dest: "./postgresql_test_user.txt"
    flat: yes

- name: Clean up script and credential file on server2
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ script_path }}"
    - "{{ credential_file }}"

- name: Allow PostgreSQL port in UFW
  ufw:
    rule: allow
    port: "{{ postgresql_listen_port }}"
    proto: tcp
    state: enabled